/* =============================================================================
   HAMBURGER-ICON (components/_hamburger-icon.scss)
   ========================================================================== */

/* Settings
   ========================================================================== */

/**
 * 1. Regulate icon padding to increase / decrease click area.
 * 2. Regulate icon layers (lines) width and height values.
 * 3. Regulate spacing between icon layers (lines).
 * 4. Set icon layers (lines) background color.
 * 5. Set icon layers (lines) border radius size.
 */

$hamburger-icon-padding-x: 1rem !default; /* [1] */
$hamburger-icon-padding-y: 1rem !default; /* [1] */
$hamburger-icon-layer-width: 3.125rem !default; /* [2] */
$hamburger-icon-layer-height: .1875rem !default; /* [2] */
$hamburger-icon-layer-spacing: .5rem !default; /* [3] */
$hamburger-icon-layer-color: $color-gray-300 !default; /* [4] */
$hamburger-icon-layer-border-radius: 0 !default; /* [5] */



/* General
   ========================================================================== */

/**
 * 1. Regulate icon padding to increase / decrease click area.
 */

.c-hamburger-icon {
	display: inline-block;
	padding: $hamburger-icon-padding-y $hamburger-icon-padding-x; /* [1] */
}



/* Box
   ========================================================================== */

/**
 * Box acts as a dummy in order to maintain icon width and height because all
 * inner elements are positioned absolutly.
 */

.c-hamburger-icon__box {
	display: block;
	position: relative;
	width: $hamburger-icon-layer-width;
	height: ($hamburger-icon-layer-height * 3) + ($hamburger-icon-layer-spacing * 2);
}



/* Inner
   ========================================================================== */

/**
 * Inner element contains all `layers` we have in hamburger icon.
 */

.c-hamburger-icon__inner {
	display: block;
	top: 50%;
	margin-top: ($hamburger-icon-layer-height / 2) * -1;

	&,
	&::before,
	&::after {
		position: absolute;
		width: $hamburger-icon-layer-width;
		height: $hamburger-icon-layer-height;
		background-color: $hamburger-icon-layer-color;
		border-radius: $hamburger-icon-layer-border-radius;
	}

	&::before,
	&::after {
		content: '';
		display: block;
	}
}



/* Variants
   ========================================================================== */

/**
 * Slider variant
 */

.c-hamburger-icon--slider {
	.c-hamburger-icon__inner {
		top: $hamburger-icon-layer-height / 2;

		&,
		&::before,
		&::after {
			transition-property: transform, opacity;
			transition-timing-function: ease;
			transition-duration: .2s;
		}

		&::before {
			top: $hamburger-icon-layer-height + $hamburger-icon-layer-spacing;
		}

		&::after {
			top: ($hamburger-icon-layer-height * 2) + ($hamburger-icon-layer-spacing * 2);
		}
	}

	/* Active state */
	&.is-active {
		.c-hamburger-icon__inner {
			$y-offset: $hamburger-icon-layer-spacing + $hamburger-icon-layer-height;
			transform: translate3d(0, $y-offset, 0) rotate(45deg);

			&::before {
				opacity: 0;
				transform: rotate(-45deg) translate3d($hamburger-icon-layer-width / -7, $hamburger-icon-layer-spacing * -1, 0);
			}

			&::after {
				transform: translate3d(0, $y-offset * -2, 0) rotate(-90deg);
			}
		}
	}
}

/**
 * White color variation.
 */

.c-hamburger-icon--white {
	.c-hamburger-icon__inner {
		&,
		&::before,
		&::after {
			background-color: $color-white;
		}
	}

	&.is-active {
		.c-hamburger-icon__inner {
			&,
			&::before,
			&::after {
				background-color: $color-gray-300;
			}
		}
	}
}
